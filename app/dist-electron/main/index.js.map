{"version":3,"file":"index.js","sources":["../../electron/main/update.ts","../../electron/main/index.ts"],"sourcesContent":["import { app, ipcMain } from 'electron'\nimport { createRequire } from 'node:module'\nimport type {\n  ProgressInfo,\n  UpdateDownloadedEvent,\n  UpdateInfo,\n} from 'electron-updater'\n\nconst { autoUpdater } = createRequire(import.meta.url)('electron-updater');\n\nexport function update(win: Electron.BrowserWindow) {\n\n  // When set to false, the update download will be triggered through the API\n  autoUpdater.autoDownload = false\n  autoUpdater.disableWebInstaller = false\n  autoUpdater.allowDowngrade = false\n\n  // start check\n  autoUpdater.on('checking-for-update', function () { })\n  // update available\n  autoUpdater.on('update-available', (arg: UpdateInfo) => {\n    win.webContents.send('update-can-available', { update: true, version: app.getVersion(), newVersion: arg?.version })\n  })\n  // update not available\n  autoUpdater.on('update-not-available', (arg: UpdateInfo) => {\n    win.webContents.send('update-can-available', { update: false, version: app.getVersion(), newVersion: arg?.version })\n  })\n\n  // Checking for updates\n  ipcMain.handle('check-update', async () => {\n    if (!app.isPackaged) {\n      const error = new Error('The update feature is only available after the package.')\n      return { message: error.message, error }\n    }\n\n    try {\n      return await autoUpdater.checkForUpdatesAndNotify()\n    } catch (error) {\n      return { message: 'Network error', error }\n    }\n  })\n\n  // Start downloading and feedback on progress\n  ipcMain.handle('start-download', (event: Electron.IpcMainInvokeEvent) => {\n    startDownload(\n      (error, progressInfo) => {\n        if (error) {\n          // feedback download error message\n          event.sender.send('update-error', { message: error.message, error })\n        } else {\n          // feedback update progress message\n          event.sender.send('download-progress', progressInfo)\n        }\n      },\n      () => {\n        // feedback update downloaded message\n        event.sender.send('update-downloaded')\n      }\n    )\n  })\n\n  // Install now\n  ipcMain.handle('quit-and-install', () => {\n    autoUpdater.quitAndInstall(false, true)\n  })\n}\n\nfunction startDownload(\n  callback: (error: Error | null, info: ProgressInfo | null) => void,\n  complete: (event: UpdateDownloadedEvent) => void,\n) {\n  autoUpdater.on('download-progress', (info: ProgressInfo) => callback(null, info))\n  autoUpdater.on('error', (error: Error) => callback(error, null))\n  autoUpdater.on('update-downloaded', complete)\n  autoUpdater.downloadUpdate()\n}\n","import { app, BrowserWindow, shell, ipcMain } from 'electron'\nimport { createRequire } from 'node:module'\nimport { fileURLToPath } from 'node:url'\nimport path from 'node:path'\nimport os from 'node:os'\nimport { update } from './update'\nimport axios from 'axios'\nimport { execSync, spawn, ChildProcess } from 'child_process'\nimport Store from 'electron-store'\nimport dotenv from 'dotenv'\nimport crypto from 'crypto'\nimport fs from 'fs'\n\nconst store = new Store();\nconst require = createRequire(import.meta.url)\nconst __dirname = path.dirname(fileURLToPath(import.meta.url))\n\n// The built directory structure\n//\n// ├─┬ dist-electron\n// │ ├─┬ main\n// │ │ └── index.js    > Electron-Main\n// │ └─┬ preload\n// │   └── index.mjs   > Preload-Scripts\n// ├─┬ dist\n// │ └── index.html    > Electron-Renderer\n\nprocess.env.APP_ROOT = path.join(__dirname, '../..')\n\ndotenv.config({\n    path: path.resolve(process.cwd(), \"../.env\")\n});\n\nexport const MAIN_DIST = path.join(process.env.APP_ROOT, 'dist-electron')\nexport const RENDERER_DIST = path.join(process.env.APP_ROOT, 'dist')\nexport const VITE_DEV_SERVER_URL = process.env.VITE_DEV_SERVER_URL\n\nprocess.env.VITE_PUBLIC = VITE_DEV_SERVER_URL\n    ? path.join(process.env.APP_ROOT, 'public')\n    : RENDERER_DIST\n\n// Disable GPU Acceleration for Windows 7\nif (os.release().startsWith('6.1')) app.disableHardwareAcceleration()\n\n// Set application name for Windows 10+ notifications\nif (process.platform === 'win32') app.setAppUserModelId(app.getName())\n\nif (!app.requestSingleInstanceLock()) {\n    app.quit()\n    process.exit(0)\n}\n\nlet win: BrowserWindow | null = null\nconst preload = path.join(__dirname, '../preload/index.mjs')\nconst indexHtml = path.join(RENDERER_DIST, 'index.html')\n\nif (process.defaultApp) {\n    if (process.argv.length >= 2) {\n        app.setAsDefaultProtocolClient(\"tunnl\", process.execPath, [path.resolve(process.argv[1])])\n    }\n} else {\n    app.setAsDefaultProtocolClient(\"tunnl\")\n}\n\nconst gotTheLock = app.requestSingleInstanceLock()\n\nconst handleDeeplink = (url: string) => {\n    if (win) {\n        const decodedUrl = decodeURI(url);\n        const urlObj = new URL(decodedUrl);\n        const params = new URLSearchParams(urlObj.search);\n        const messageParam = params.get(\"message\");\n        if (messageParam) {\n            const message = JSON.parse(decodeURIComponent(messageParam));\n            if (message.type === 'login')\n                win.webContents.send(\"login-event\", message.data);\n        }\n    }\n}\n\nasync function createWindow() {\n    win = new BrowserWindow({\n        title: 'Main window',\n        icon: path.join(process.env.VITE_PUBLIC, 'favicon.ico'),\n        webPreferences: {\n            preload,\n            // Warning: Enable nodeIntegration and disable contextIsolation is not secure in production\n            // nodeIntegration: true,\n\n            // Consider using contextBridge.exposeInMainWorld\n            // Read more on https://www.electronjs.org/docs/latest/tutorial/context-isolation\n            // contextIsolation: false,\n        },\n    })\n\n    if (VITE_DEV_SERVER_URL) { // #298\n        win.loadURL(VITE_DEV_SERVER_URL)\n        // Open devTool if the app is not packaged\n        win.webContents.openDevTools()\n    } else {\n        win.loadFile(indexHtml)\n    }\n\n    // Test actively push message to the Electron-Renderer\n    win.webContents.on('did-finish-load', () => {\n        win?.webContents.send('main-process-message', new Date().toLocaleString())\n    })\n\n    // Make all links open with the browser, not with the application\n    win.webContents.setWindowOpenHandler(({ url }) => {\n        if (url.startsWith('https:')) shell.openExternal(url)\n        return { action: 'deny' }\n    })\n\n    // Auto update\n    update(win)\n}\n\nif (!gotTheLock) {\n    app.quit()\n} else {\n    app.whenReady().then(() => {\n        createWindow()\n    })\n}\n\napp.on('second-instance', (event, commandLine, workingDirectory) => {\n    // Someone tried to run a second instance, we should focus our window.\n    if (win) {\n        if (win.isMinimized()) win.restore()\n        win.focus()\n    }\n    // the commandLine is array of strings in which last element is deep link url\n\n    if (process.platform !== 'darwin') {\n        const url: string | undefined = commandLine.pop();\n        if (url)\n            handleDeeplink(url);\n    }\n\n})\n\napp.on('open-url', (_, url) => {\n    handleDeeplink(url);\n})\n\napp.on('window-all-closed', () => {\n    win = null\n    if (process.platform !== 'darwin') app.quit()\n})\n\napp.on('activate', () => {\n    const allWindows = BrowserWindow.getAllWindows()\n    if (allWindows.length) {\n        allWindows[0].focus()\n    } else {\n        createWindow()\n    }\n})\n\n// New window example arg: new windows url\nipcMain.handle('open-win', (_, arg) => {\n    const childWindow = new BrowserWindow({\n        webPreferences: {\n            preload,\n            nodeIntegration: true,\n            contextIsolation: false,\n        },\n    })\n\n    if (VITE_DEV_SERVER_URL) {\n        childWindow.loadURL(`${VITE_DEV_SERVER_URL}#${arg}`)\n    } else {\n        childWindow.loadFile(indexHtml, { hash: arg })\n    }\n})\n\nipcMain.handle('request', async (_, axios_request) => {\n    const result = await axios(axios_request)\n    return { data: result.data, status: result.status }\n})\n\nipcMain.handle('openLinkInBrowser', async (_, url) => shell.openExternal(url));\n\nipcMain.handle('store:set', async (_, key: string, object: any) => {\n    (store as any).set(key, object);\n})\n\nipcMain.handle('store:get', async (_, key: string) => {\n    return (store as any).get(key);\n})\n\nipcMain.handle('store:delete', async (_, key: string) => {\n    return (store as any).delete(key);\n})\n\nconst getDeviceID = () => {\n    let id = \"\";\n    if (process.platform === \"darwin\") {\n        id = execSync(`\n            ioreg -rd1 -c IOPlatformExpertDevice | grep -E \"IOPlatformUUID\" | awk '{ print $3 }' | sed 's/\\\"//g'\n        `).toString().trim();\n    } else if (process.platform === \"win32\") {\n        id = execSync('reg query \"HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Cryptography\" /v MachineGuid')\n            .toString().split('REG_SZ')[1]\n            .trim();\n    } else if (process.platform === \"linux\") {\n        if (fs.existsSync('/etc/machine-id')) {\n            id = fs.readFileSync('/etc/machine-id', 'utf8').trim();\n        } else if (fs.existsSync('/var/lib/dbus/machine-id')) {\n            id = fs.readFileSync('/var/lib/dbus/machine-id', 'utf8').trim();\n        }\n    }\n\n    const hash = crypto.hash(\"sha256\", id);\n\n    return hash;\n}\n\nipcMain.handle('getDeviceID', (_) => getDeviceID());\n\nconst getHostname = () => {\n    return os.hostname();\n}\n\nipcMain.handle('getHostname', (_) => getHostname());\n\nlet tunneler: ChildProcess | null = null;\n\nconst startZitiEdgeTunneler = () => {\n    if (tunneler) {\n        console.log(\"Ziti Edge Tunneler is already running.\");\n        return;\n    }\n\n    const zitiPath = path.resolve(`${app.getAppPath()}/ziti`);\n    const identitiesPath = path.resolve(`${zitiPath}/identities`);\n    const binaryPath = path.resolve(`${zitiPath}/ziti-edge-tunnel-darwin`);\n\n    const command = `${binaryPath} run-host -i ${identitiesPath}/tunnelerTester.json`;\n\n    tunneler = spawn(command, {\n        detached: false,\n        stdio: [\"ignore\", \"pipe\", \"pipe\"],\n    });\n\n    tunneler.stderr?.on(\"data\", (data) => {\n        console.error(`CLI Error: ${data.toString()}`);\n    });\n\n    tunneler.stdout?.on(\"data\", (data) => {\n        console.log(`CLI Output: ${data.toString()}`);\n    });\n\n    tunneler.on(\"error\", (err) => {\n        console.error(`Failed to start CLI process: ${err}`);\n    });\n}\n\nstartZitiEdgeTunneler()\n"],"names":["win"],"mappings":"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"}