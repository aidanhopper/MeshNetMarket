"use client"

import { z } from "zod";
import { Button } from "@/components/ui/button";
import {
    Form,
    FormControl,
    FormDescription,
    FormField,
    FormItem,
    FormLabel,
    FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import {
    DropdownMenu,
    DropdownMenuItem,
    DropdownMenuTrigger,
    DropdownMenuContent,
} from "@/components/ui/dropdown-menu";
import {
    Select,
    SelectContent,
    SelectItem,
    SelectTrigger,
    SelectValue,
} from "@/components/ui/select"
import { useState } from "react";
import { Switch } from "@/components/ui/switch";

const devices = ["Mac", "Desktop", "VPS-1"];

const discriminatorUnion = z.discriminatedUnion('type', [
    z.object({
        type: z.literal('forwardPorts'),
        sourcePorts: z.string().nonempty(),
    }),
    z.object({
        type: z.literal('notForwardPorts'),
        sourcePort: z.string().nonempty(),
    }),
]);

const formSchema = z.object({
    name: z.string().min(2).max(50),
    device: z.string().nonempty(),
    domain: z.string().min(2),
    forwardPorts: z.string(),
}).and(discriminatorUnion);

const CreateServiceForm = () => {
    const [selectedDeviceIndex, setSelectedDeviceIndex] = useState<number | null>(
        null,
    );

    const [forwardPorts, setForwardPorts] = useState(false);

    const form = useForm<z.infer<typeof formSchema>>({
        resolver: zodResolver(formSchema),
        defaultValues: {
            type: 'notForwardPorts',
            name: '',
            device: '',
            domain: '',
            forwardPorts: '',
            sourcePort: '',
        },
    });

    const handleToggleForwardPorts = (value: boolean) => {
        const common = {
            name: form.getValues('name'),
            domain: form.getValues('domain'),
        }

        if (value) {
            form.reset({
                ...common,
                type: 'forwardPorts',
                forwardPorts: '',
                sourcePorts: ''
            });
        } else {
            form.reset({
                ...common,
                type: 'notForwardPorts',
                forwardPorts: '',
                sourcePort: ''
            });
        }
        setForwardPorts(value);
    }

    const onSubmit = (values: z.infer<typeof formSchema>) => {
        // Do something with the form values.
        // âœ… This will be type-safe and validated.
        console.log(values);
    };

    return (
        <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
                <FormField
                    control={form.control}
                    name="name"
                    render={({ field }) => (
                        <FormItem>
                            <FormLabel>Name</FormLabel>
                            <FormControl>
                                <Input placeholder="eg. Minecraft Server" {...field} />
                            </FormControl>
                            <FormDescription>
                                This is your services public display name.
                            </FormDescription>
                            <FormMessage />
                        </FormItem>
                    )}
                />
                <FormField
                    control={form.control}
                    name="device"
                    render={({ field }) => (
                        <FormItem>
                            <FormLabel>Device</FormLabel>
                            <Select
                                onValueChange={field.onChange}
                                defaultValue={field.value}
                                value={field.value}
                            >
                                <FormControl>
                                    <SelectTrigger>
                                        <SelectValue placeholder="Select a category" />
                                    </SelectTrigger>
                                </FormControl>
                                <SelectContent className='w-full'>
                                    <SelectItem value="option1" className='w-full'>Option 1</SelectItem>
                                    <SelectItem value="option2">Option 2</SelectItem>
                                    <SelectItem value="option3">Option 3</SelectItem>
                                </SelectContent>
                            </Select>
                            <FormDescription>
                                This is the device your service runs on.
                            </FormDescription>
                            <FormMessage />
                        </FormItem>
                    )}
                />
                <FormField
                    control={form.control}
                    name="domain"
                    render={({ field }) => (
                        <FormItem>
                            <FormLabel>Domain</FormLabel>
                            <FormControl>
                                <Input placeholder='eg. my.minecraft.server' {...field} />
                            </FormControl>
                            <FormDescription>
                                This is the domain users can access the serivce on over the tunneler.
                            </FormDescription>
                            <FormMessage />
                        </FormItem>
                    )}
                />
                <FormField
                    control={form.control}
                    name="forwardPorts"
                    render={({ field }) => (
                        <FormItem>
                            <FormLabel>Forward Ports</FormLabel>
                            <FormControl>
                                <Switch
                                    {...field}
                                    onClick={() => handleToggleForwardPorts(!forwardPorts)}
                                    className='cursor-pointer'
                                >
                                    Toggle
                                </Switch>
                            </FormControl>
                            <FormDescription>
                                This is your services public display name.
                            </FormDescription>
                            <FormMessage />
                        </FormItem>
                    )}
                />
                {forwardPorts &&
                    <FormField
                        control={form.control}
                        name='sourcePorts'
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>Source Ports</FormLabel>
                                <FormControl>
                                    <Input placeholder='eg. 25565 100-500' {...field} />
                                </FormControl>
                                <FormDescription>
                                    These are the ports your service is running on.
                                </FormDescription>
                                <FormMessage />
                            </FormItem>
                        )}
                    />
                }
                {!forwardPorts &&
                    <FormField
                        control={form.control}
                        name='sourcePort'
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>Source Port</FormLabel>
                                <FormControl>
                                    <Input placeholder='eg. 25565' {...field} />
                                </FormControl>
                                <FormDescription>
                                    This is the port your service is running on.
                                </FormDescription>
                                <FormMessage />
                            </FormItem>
                        )}
                    />
                }
                <Button className="cursor-pointer w-full" type="submit">
                    Submit
                </Button>
            </form>
        </Form>
    );
};

export default CreateServiceForm;
